apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: secrel-config-generator
  title: SecRel Configuration Generator
  description: Generates a config.yml for SecRel with language configurations
spec: 
  owner: jnkansah-va
  type: service

  parameters:
    - title: Choose Application Language
      required:
        - language
      properties:
        language:
          title: Select the language of your application
          type: string
          enum:
            - Python
            - Java
            - Ruby
            - JavaScript
          description: Language your application is written in

    - title: Python Configuration
      if: '{{ parameters.language === "Python" }}'
      required:
        - version
        - requirements
      properties:
        requirements:
          title: Path to one or more requirements.txt
          type: string
        version:
          title: Python version
          type: string
    - title: Java Configuration
      if: '{{ parameters.language === "Java" }}'
      required:
        - version
        - packageManager
        - buildArgs
      properties:
        version:
          title: Java version
          type: string
        packageManager:
          title: Java package manager (e.g., Maven, Gradle)
          type: string
        buildArgs:
          title: List of arguments to pass to the package manager
          type: string
        
    - title: Ruby Configurtion
      if: '{{ parameters.language === "Ruby" }}'
      required:
        - version
        - gemFilePath
      properties:
        version: 
          title: Ruby Version
          type: string
        gemFilePath:
          title: Paths to all gemfiles for the project
          type: string
    
    - title: JavaScript Configuration
      if: '{{ parameters.language === "JavaScript "}}'
      required:
        - version
        - packageManager
        - packageManagerVersion
        - env
        - buildArgs
        - paths
      properties:
        version:
          title: JavaScript version
          type: string
        packageManager:
          title: Package Manager (npm, yarn)
          type: string
        packageManagerVersion:
          title: JavaScript Package Manager version
          type: string
        env:
          title: List of environmental vars to be used by package manager
          type: string
        buildArgs:
          title: List of args to pass to package manager
          type: string
        paths:
          title: List of paths to dependencies
          type: string
  
  steps:
    - id: fetch-template
      name: Fetch template
      action: fetch:template:file
      input:
        url: https://github.com/department-of-veterans-affairs/lighthouse-tornado-secrel-pipeline-onboarding-clone/tree/jnkansah-backstage-testing/templates/config-template.yml
        targetPath: ./secrel-templates
        values:
          language: '{{ parameters.language }}'
          version: '{{ parameters.version }}'
          requirements: '{{ parameters.requirements }}'
          buildArgs: '{{ parameters.buildArgs }}'
          packageManager: '{{ parameters.packageManager }}'
          gemFilePath: '{{ parameters.gemFilePath }}'
          packageManagerVersion: '{{ parameters.packageManagerVersion }}'
          env: '{{ parameters.env }}'
          paths: '{{ parameters.paths }}




        # dependencies:
        #   language:
        #     allOf:
        #       - if:
        #           properties:
        #             language:
        #               contains:
        #                 const: Python
        #         then:
        #           properties:
        #             pythonData:
        #               title: Configure SecRel for Python Application
        #               type: array
        #               minItems: 1
        #               items:
        #                 type: object
        #                 properties:
        #                   requirements:
        #                     title: Path to one or more requirements.txt
        #                     type: string
        #                   version:
        #                     title: Version
        #                     type: string

  # steps:
#   - id: generate-config
  #     name: Generate Configuration
  #     action: template
  #     input: 
  #       template: |
  #         languages:
  #         %{ if parameters.javaEnabled %}
  #           java:
  #             version: "${{ parameters.javaVersion }}"
  #             package-manager: "${{ parameters.javaPackageManager }}"
  #         %{ if parameters.javaBuildArgs %}
  #             build-args:
  #         %{ for arg in parameters.javaBuildArgs | splitByComma %}
  #               - {{ arg }}
  #         %{ endfor %}
  #         %{ endif %}
  #         %{ endif %}

  #         %{ if parameters.pythonEnabled %}
  #           python:
  #             version: "${{ parameters.pythonVersion }}"
  #         %{ if parameters.pythonRequirements %}
  #             requirements:
  #         %{ for req in parameters.pythonRequirements | splitByComma %}
  #               - {{ req }}
  #         %{ endfor %}
  #         %{ endif %}
  #         %{ endif %}

  #         %{ if parameters.javascriptEnabled %}
  #           javascript:
  #             package-manager: "${{ parameters.javascriptPackageManager }}"
  #         %{ if parameters.javascriptPackageManagerVersion %}
  #             package-manager-version: "${{ parameters.javascriptPackageManagerVersion }}"
  #         %{ endif %}
  #             version: "${{ parameters.javascriptVersion }}"
  #         %{ if parameters.javascriptEnv %}
  #             env:
  #         %{ for envVar in parameters.javascriptEnv | splitByComma %}
  #               - {{ envVar }}
  #         %{ endfor %}
  #         %{ endif %}
  #         %{ if parameters.javascriptBuildArgs %}
  #             build-args:
  #         %{ for arg in parameters.javascriptBuildArgs | splitByComma %}
  #               - {{ arg }}
  #         %{ endfor %}
  #         %{ endif %}
  #         %{ if parameters.javascriptPaths %}
  #             paths:
  #         %{ for path in parameters.javascriptPaths | splitByComma %}
  #               - {{ path }}
  #         %{ endfor %}
  #         %{ endif %}
  #         %{ endif %}

  #         %{ if parameters.rubyEnabled %}
  #           ruby:
  #             version: "${{ parameters.rubyVersion }}"
  #         %{ if parameters.rubyPaths %}
  #             paths:
  #         %{ for path in parameters.rubyPaths | splitByComma %}
  #               - {{ path }}
  #         %{ endfor %}
  #         %{ endif %}
  #         %{ endif %}
  #       targetFile: config.yml



  
    #   fields:
    #     - name: owner
    #       title: GitHub Owner
    #       type: string
    #       description: The owner (user or organization) of the repository.
    #       ui: { "widget": "text" }
    #     - name: repository
    #       title: Repository Name
    #       type: string
    #       description: The name of the GitHub repository
    #       ui: { "widget": "text" }
    #     - name: defaultBranch
    #       title: Default Branch
    #       type: string
    #       description: Default branch of the repository.
    #       ui: { "widget": "text" }
    # - title: Java Configuration
    #   fields:
    #     - name: javaEnabled
    #       title: Enable Java
    #       type: boolean
    #       default: false
    #       ui: { "widget": "boolean" }
    #     - name: javaVersion
    #       title: Java Version
    #       type: string
    #       description: Version of Java to use
    #       options: 
    #         - "8"
    #         - "11"
    #         - "17"
    #         - "21"
    #       default: "17"
    #       ui: { "widget": "select" }
    #     - name: javaPackageManager
    #       title: Java Package Manager
    #       type: string
    #       description: Package manager for Java
    #       options:
    #         - "maven"
    #         - "gradle"
    #       default: "maven"
    #       ui: { "widget": "select" }
    #     - name: javaBuildArgs
    #       title: Java Build Arguments
    #       type: string
    #       description: List of arguments for the Java package manager (comma-separated).
    #       ui: { "widget": "text" }
    # - title: Python Configuration
    #   fields:
    #     - name: pythonEnabled
    #       title: Enable Python
    #       type: boolean
    #       default: false
    #       ui: { "widget": "boolean" }
    #     - name: pythonVersion
    #       title: Python Version
    #       type: string
    #       description: Version of Python to use.
    #       options:
    #         - "3.8"
    #         - "3.9"
    #         - "3.10"
    #         - "3.11"
    #         - "3.12"
    #       default: "3.9"
    #       ui: { "widget": "select" }
    #     - name: pythonRequirements
    #       title: Python Requirements Path
    #       type: string
    #       description: Path to Python requirements files (comma-separated)
    #       ui: { "widget": "text" }
    # - title: JavaScript Configuration
    #   fields:
    #     - name: javascriptEnabled
    #       title: Enable JavaScript
    #       type: boolean
    #       default: false
    #       ui: { "widget": "boolean" }
    #     - name: javascriptPackageManager
    #       title: JavaScript Package Manager
    #       type: string
    #       description: Package Manager for JavaScript
    #       options:
    #         - "yarn"
    #         - "npm"
    #       default: "yarn"
    #       ui: { "widget": "select" }
    #     - name: javascriptPackageManagerVersion
    #       title: JavaScript Package Manager Version
    #       type: string
    #       description: Version of the JavaScript Package Manager/
    #       ui: { "widget": "text" }
    #     - name: javascriptVersion
    #       title: Node.js Version
    #       type: string
    #       description: Version of Node.js to use.
    #       options:
    #         - "14"
    #         - "16"
    #         - "18"
    #         - "20"
    #       default: "18"
    #       ui: { "widget": "select" }
    #     - name: javascriptEnv
    #       title: JavaScript Environment Variables
    #       type: string
    #       description: Environment variables for JavaScript (comma-separated, e.g., 'GITHUB_TOKEN=${{ secrets.ACCESS_TOKEN }}').
    #       ui: { "widget": "text" }
    #     - name: javascriptBuildArgs
    #       title: JavaScript Build Arguments
    #       type: string
    #       description: Arguments for the JavaScript package manager (comma-separated).
    #       ui: { "widget": "text" }
    #     - name: javascriptPaths
    #       title: JavaScript Paths
    #       type: string
    #       description: Paths to directories with package.json files (comma-separated).
    #       ui: { "widget": "text" }
    # - title: Ruby Configuration
    #   fields: 
    #     - name: rubyEnabled
    #       title: Enable Ruby
    #       type: boolean
    #       default: false
    #       ui: { "widget": "boolean" }
    #     - name: rubyVersion
    #       title: Ruby Version
    #       type: string
    #       description: Version of Ruby to use.
    #       options:
    #         - "2.7"
    #         - "3.0"
    #         - "3.1"
    #         - "3.2"
    #       default: "3.2"
    #       ui: { "widget": "select" }
    #     - name: rubyPaths
    #       title: Ruby Paths
    #       type: string
    #       description: Paths to Gemfiles or directories containing Gemfiles (comma-separated).
    #       ui: { "widget": "text" }

  # steps:
  #   - id: generate-config
  #     name: Generate Configuration
  #     action: template
  #     input: 
  #       template: |
  #         languages:
  #         %{ if parameters.javaEnabled %}
  #           java:
  #             version: "${{ parameters.javaVersion }}"
  #             package-manager: "${{ parameters.javaPackageManager }}"
  #         %{ if parameters.javaBuildArgs %}
  #             build-args:
  #         %{ for arg in parameters.javaBuildArgs | splitByComma %}
  #               - {{ arg }}
  #         %{ endfor %}
  #         %{ endif %}
  #         %{ endif %}

  #         %{ if parameters.pythonEnabled %}
  #           python:
  #             version: "${{ parameters.pythonVersion }}"
  #         %{ if parameters.pythonRequirements %}
  #             requirements:
  #         %{ for req in parameters.pythonRequirements | splitByComma %}
  #               - {{ req }}
  #         %{ endfor %}
  #         %{ endif %}
  #         %{ endif %}

  #         %{ if parameters.javascriptEnabled %}
  #           javascript:
  #             package-manager: "${{ parameters.javascriptPackageManager }}"
  #         %{ if parameters.javascriptPackageManagerVersion %}
  #             package-manager-version: "${{ parameters.javascriptPackageManagerVersion }}"
  #         %{ endif %}
  #             version: "${{ parameters.javascriptVersion }}"
  #         %{ if parameters.javascriptEnv %}
  #             env:
  #         %{ for envVar in parameters.javascriptEnv | splitByComma %}
  #               - {{ envVar }}
  #         %{ endfor %}
  #         %{ endif %}
  #         %{ if parameters.javascriptBuildArgs %}
  #             build-args:
  #         %{ for arg in parameters.javascriptBuildArgs | splitByComma %}
  #               - {{ arg }}
  #         %{ endfor %}
  #         %{ endif %}
  #         %{ if parameters.javascriptPaths %}
  #             paths:
  #         %{ for path in parameters.javascriptPaths | splitByComma %}
  #               - {{ path }}
  #         %{ endfor %}
  #         %{ endif %}
  #         %{ endif %}

  #         %{ if parameters.rubyEnabled %}
  #           ruby:
  #             version: "${{ parameters.rubyVersion }}"
  #         %{ if parameters.rubyPaths %}
  #             paths:
  #         %{ for path in parameters.rubyPaths | splitByComma %}
  #               - {{ path }}
  #         %{ endfor %}
  #         %{ endif %}
  #         %{ endif %}
  #       targetFile: config.yml
  #   - id: commit-and-push
  #     name: Commit and Push
  #     action: git:commit
  #     input:
  #       message: "Add SecRel config.yml"
  #       workspacePath: .
  #   - id: create-pr
  #     name: Create Pull Request
  #     action: github:pull-request
  #     input:
  #       repo: ${{ parameters.repository }}
  #       title: "SecRel Configuration (config.yml)"
  #       description: "This PR adds the config.yml file for SecRel configuration."
  #       targetBranch: ${{ parameters.defaultBranch }}
  #       sourceBranch: "secrel-config-${{ execution.id }}"

  # output:
  #   remoteUrl: ${{ steps.create-pr.output.remoteUrl }}
  #   pullRequestUrl: ${{ steps.create-pr.output.pullRequestUrl }}